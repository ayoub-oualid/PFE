{
	"info": {
		"_postman_id": "your-postman-id",
		"name": "Inspection Management System API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5000/api"
		}
	],
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Register Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has admin user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"Admin User\");",
									"    pm.expect(jsonData.email).to.eql(\"admin@example.com\");",
									"    pm.expect(jsonData.role).to.eql(\"admin\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Admin User\",\n    \"email\": \"admin@example.com\",\n    \"password\": \"admin123\",\n    \"role\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has admin user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"Admin User\");",
									"    pm.expect(jsonData.email).to.eql(\"admin@example.com\");",
									"    pm.expect(jsonData.role).to.eql(\"admin\");",
									"});",
									"",
									"pm.test(\"JWT cookie is set\", function () {",
									"    pm.expect(pm.cookies.has('jwt')).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@example.com\",\n    \"password\": \"admin123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Inspector",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has inspector user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"Inspector User\");",
									"    pm.expect(jsonData.email).to.eql(\"inspector@example.com\");",
									"    pm.expect(jsonData.role).to.eql(\"inspector\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Inspector User\",\n    \"email\": \"inspector@example.com\",\n    \"password\": \"inspector123\",\n    \"role\": \"inspector\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array of users\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    pm.expect(jsonData.length).to.be.at.least(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Collaborator",
			"item": [
				{
					"name": "Create Collaborator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has collaborator data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.fullName).to.eql(\"John Doe\");",
									"    pm.expect(jsonData.employeeId).to.eql(\"EMP001\");",
									"    pm.globals.set(\"collaboratorId\", jsonData._id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fullName\": \"John Doe\",\n    \"employeeId\": \"EMP001\",\n    \"department\": \"Operations\",\n    \"position\": \"Operator\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/collaborators",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collaborators"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Collaborators",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array of collaborators\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    pm.expect(jsonData.length).to.be.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/collaborators",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collaborators"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Line",
			"item": [
				{
					"name": "Create Line",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has line data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.trainNumber).to.eql(\"TRN001\");",
									"    pm.globals.set(\"lineId\", jsonData._id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"trainNumber\": \"TRN001\",\n    \"dateTime\": \"2023-06-01T10:00:00Z\",\n    \"firstStop\": \"Station A\",\n    \"lastStop\": \"Station Z\",\n    \"collaborators\": [\"{{collaboratorId}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/lines",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"lines"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Lines",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array of lines\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    pm.expect(jsonData.length).to.be.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/lines",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"lines"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Inspection",
			"item": [
				{
					"name": "Create Inspection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has inspection data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"planned\");",
									"    pm.globals.set(\"inspectionId\", jsonData._id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"collaborator\": \"{{collaboratorId}}\",\n    \"line\": \"{{lineId}}\",\n    \"plannedDateTime\": \"2023-06-05T14:00:00Z\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/inspections",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"inspections"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Inspections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array of inspections\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    pm.expect(jsonData.length).to.be.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/inspections",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"inspections"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Report",
			"item": [
        {
          "name": "Create Report",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has report data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.inspection).to.eql(pm.globals.get(\"inspectionId\"));",
                  "    pm.expect(jsonData.field1).to.eql(\"Test field 1\");",
                  "    pm.globals.set(\"reportId\", jsonData._id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"inspection\": \"{{inspectionId}}\",\n    \"field1\": \"Test field 1\",\n    \"field2\": \"Test field 2\",\n    \"field3\": \"Test field 3\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/reports",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "reports"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All Reports",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array of reports\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.be.at.least(1);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/reports",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "reports"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Report By ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct report data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.eql(pm.globals.get(\"reportId\"));",
                  "    pm.expect(jsonData.inspection).to.eql(pm.globals.get(\"inspectionId\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/reports/{{reportId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "reports",
                "{{reportId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Report",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Report is updated\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.field1).to.eql(\"Updated field 1\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"field1\": \"Updated field 1\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/reports/{{reportId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "reports",
                "{{reportId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Report",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Report is deleted\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Report removed\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/reports/{{reportId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "reports",
                "{{reportId}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Error Handling",
      "item": [
        {
          "name": "Invalid Route",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error message is correct\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include(\"Not Found\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/invalidroute",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "invalidroute"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Unauthorized Access",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error message is correct\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Not authorized, no token\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/profile",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "profile"
              ]
            }
          },
          "response": []
        }
      ]
    }
  ]
}